name: 'ECS Build and Deploy'
description: 'ECS Build and Deploy Github Action'
inputs:
  build_path:  # id of input
    description: 'Working directory for build'
    required: true
    default: './'
  aws_secret_id:
    description: 'AWS Access Key ID'
    required: true
  aws_secret_key:
    description: 'AWS Secret Access Key'
    required: true

runs:
  using: "composite"
  steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.aws_secret_id }}
        aws-secret-access-key: ${{ inputs.aws_secret_key }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Setup Node
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Login to Amazon CodeArtifact
      id: login-codeartifact
      working-directory: ${{ inputs.build_path }}
      shell: bash
      run: aws codeartifact login --tool npm --repository onkai-npm-packages --domain onkai --namespace onkai --duration-seconds 900

    - name: Copy npmrc
      working-directory: ${{ inputs.build_path }}
      shell: bash
      run: cat ~/.npmrc && cp ~/.npmrc ./npmrc

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      shell: bash
      working-directory: ${{ inputs.build_path }}
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.ecr_repository }}
        BRANCH: ${{ env.branch }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:$BRANCH-$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:$BRANCH .
        docker push --all-tags $ECR_REGISTRY/$ECR_REPOSITORY
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$BRANCH-$IMAGE_TAG"

    - name: Download task definition
      env:
        AWS_REGION: ${{ env.region }}
        TASK_DEF: ${{ env.taskDefinition }}
      shell: bash
      run: |
        aws ecs describe-task-definition --task-definition $TASK_DEF --query taskDefinition > task-definition.json

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.containerName }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      id: task-deploy
      env:
        AWS_REGION: ${{ env.region }}
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ecsService }}
        cluster: ${{ env.ecsCluster }}
        wait-for-service-stability: true